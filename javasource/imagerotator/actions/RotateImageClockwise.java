// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package imagerotator.actions;

import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import javax.imageio.ImageIO;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class RotateImageClockwise extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __inputImage;
	private system.proxies.Image inputImage;

	public RotateImageClockwise(IContext context, IMendixObject inputImage)
	{
		super(context);
		this.__inputImage = inputImage;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.inputImage = __inputImage == null ? null : system.proxies.Image.initialize(getContext(), __inputImage);

		// BEGIN USER CODE
		IContext context = this.getContext();

		BufferedImage image = null;
		BufferedImage rotatedImage = null;
		InputStream inputStream = null;
		ByteArrayOutputStream outputStream = null;

		try {
			
			image = ImageIO.read(Core.getImage(context, __inputImage, false));
			
			rotatedImage = rotate(image);
			outputStream = new ByteArrayOutputStream();
			ImageIO.write(rotatedImage, "jpeg", outputStream);
			inputStream = new ByteArrayInputStream(outputStream.toByteArray());
			Core.storeImageDocumentContent(context, __inputImage, inputStream, 100, 100);
			return __inputImage;
		}

		finally {
			inputStream.close();
			outputStream.close();
			
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "RotateImageClockwise";
	}

	// BEGIN EXTRA CODE
	private static final BufferedImage rotate(BufferedImage image) {
		
		final double rads = Math.toRadians(90);
		final double sin = Math.abs(Math.sin(rads));
		final double cos = Math.abs(Math.cos(rads));
		final int w = (int) Math.floor(image.getWidth() * cos + image.getHeight() * sin);
		final int h = (int) Math.floor(image.getHeight() * cos + image.getWidth() * sin);
		final BufferedImage rotatedImage = new BufferedImage(w, h, image.getType());
		final AffineTransform at = new AffineTransform();
		at.translate(w / 2, h / 2);
		at.rotate(rads,0, 0);
		at.translate(-image.getWidth() / 2, -image.getHeight() / 2);
		final AffineTransformOp rotateOp = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
		rotateOp.filter(image,rotatedImage);
		return rotatedImage;
	}
	// END EXTRA CODE
}
