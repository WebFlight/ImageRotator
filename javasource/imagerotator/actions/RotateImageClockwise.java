// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package imagerotator.actions;

import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.NoSuchElementException;
import javax.imageio.ImageIO;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

import system.proxies.FileDocument;

import com.mendix.systemwideinterfaces.core.IMendixObject;

public class RotateImageClockwise extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __inputImage;
	private system.proxies.Image inputImage;

	public RotateImageClockwise(IContext context, IMendixObject inputImage)
	{
		super(context);
		this.__inputImage = inputImage;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.inputImage = __inputImage == null ? null : system.proxies.Image.initialize(getContext(), __inputImage);

		// BEGIN USER CODE

		FileDocument file = null;
		String filename = file.getName();
		String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());

		String jpg = "jpg";
		String jpeg = "jpeg";
		if (!extension.equals(jpg) && !extension.contentEquals(jpeg)) {
			Core.getLogger("ImageRotator").error("The file must be a jpg or jpeg file.");
		}
		else {
		
		if (__inputImage == null) {
			throw new NullPointerException("No image provided.");
		} 
		else if (inputImage.getHasContents() != true) {
			Core.getLogger("ImageRotator").error("The input image has no contents.");
			return false;
		} 
		else {
		
		IContext context = this.getContext();

		BufferedImage image = null;
		BufferedImage rotatedImage = null;
		InputStream inputStream = null;
		ByteArrayOutputStream outputStream = null;

		try {

			image = ImageIO.read(Core.getImage(context, __inputImage, false));

			rotatedImage = rotate(image);
			outputStream = new ByteArrayOutputStream();
			ImageIO.write(rotatedImage, "jpeg", outputStream);
			inputStream = new ByteArrayInputStream(outputStream.toByteArray());
			Core.storeImageDocumentContent(context, __inputImage, inputStream, 100, 100);
			return true;

		} catch (NullPointerException e) {
			Core.getLogger("ImageRotator").error(e.getMessage(), e);
			return false;
		} catch (Exception e) {
			Core.getLogger("ImageRotator").error(e.getMessage(), e);
			return false;
		} finally {
			inputStream.close();
			outputStream.close();
		}}}
		return true;

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "RotateImageClockwise";
	}

	// BEGIN EXTRA CODE
	private final BufferedImage rotate(BufferedImage image) {

		final double rads = Math.toRadians(90);
		final double sin = Math.abs(Math.sin(rads));
		final double cos = Math.abs(Math.cos(rads));
		final int w = (int) Math.floor(image.getWidth() * cos + image.getHeight() * sin);
		final int h = (int) Math.floor(image.getHeight() * cos + image.getWidth() * sin);
		final BufferedImage rotatedImage = new BufferedImage(w, h, image.getType());
		final AffineTransform at = new AffineTransform();
		at.translate(w / 2, h / 2);
		at.rotate(rads, 0, 0);
		at.translate(-image.getWidth() / 2, -image.getHeight() / 2);
		final AffineTransformOp rotateOp = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
		rotateOp.filter(image, rotatedImage);
		return rotatedImage;
	}
	// END EXTRA CODE
}
