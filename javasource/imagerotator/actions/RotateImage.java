// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package imagerotator.actions;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import javax.imageio.ImageIO;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import imagerotator.usecases.ImageRotator;
import imagerotator.usecases.ImageRotatorInputValidator;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class RotateImage extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __inputImage;
	private system.proxies.Image inputImage;
	private java.lang.Long maxFileSizeKiloByte;
	private imagerotator.proxies.ENU_Direction direction;

	public RotateImage(IContext context, IMendixObject inputImage, java.lang.Long maxFileSizeKiloByte, java.lang.String direction)
	{
		super(context);
		this.__inputImage = inputImage;
		this.maxFileSizeKiloByte = maxFileSizeKiloByte;
		this.direction = direction == null ? null : imagerotator.proxies.ENU_Direction.valueOf(direction);
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.inputImage = __inputImage == null ? null : system.proxies.Image.initialize(getContext(), __inputImage);

		// BEGIN USER CODE
		String filename = inputImage.getName();
		String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());
		String lowerCaseExtension = extension.toLowerCase();
		String directionLowerCase = direction.toString().toLowerCase();

		ImageRotatorInputValidator validator = new ImageRotatorInputValidator();
		validator.validate(directionLowerCase, this.inputImage, maxFileSizeKiloByte, lowerCaseExtension);

		IContext context = this.getContext();

		BufferedImage image = null;
		BufferedImage rotatedImage = null;

		ImageRotator rotator = new ImageRotator();

		try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
				) {

			image = ImageIO.read(Core.getImage(context, __inputImage, false));
			rotatedImage = rotator.rotate(image, directionLowerCase);
			ImageIO.write(rotatedImage, "jpeg", outputStream);
			
			try (InputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray())) {
				Core.storeImageDocumentContent(context, __inputImage, inputStream, 100, 100);
			}

		}

		return true;

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "RotateImage";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
